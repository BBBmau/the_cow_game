name: Build and Push image to GCP Artifact Registry

on:
  workflow_dispatch: # manually trigger the workflow
  push:
    branches: [ main ]
    paths-ignore:
      - 'infra/**'
      - '.github/**'
  pull_request:
    branches: [ main ] # testing within PRs before merging to main
    paths-ignore:
      - 'infra/**'
      - '.github/**'

env:
  PROJECT_ID: thecowgame
  REGION: us-west1
  REPOSITORY: game-images
  IMAGE: mmo-servers

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Check if image already exists with current hash
      id: check-image
      run: |
        # Try to pull the image with current commit hash
        if docker pull ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} 2>/dev/null; then
          echo "Image with hash ${{ github.sha }} already exists"
          echo "skip_build=true" >> $GITHUB_OUTPUT
        else
          echo "Image with hash ${{ github.sha }} does not exist, will build"
          echo "skip_build=false" >> $GITHUB_OUTPUT
        fi

    # // we don't use latest as the tag in order for the deployment to pull the correct image (most upto date, if latest it will assume that it already exists)
    - name: Build and push Docker image
      if: steps.check-image.outputs.skip_build != 'true'
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
        docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} \
        ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}

    - name: Output image URI
      if: steps.check-image.outputs.skip_build != 'true'
      run: |
        echo "Image URI: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}"
        
    - name: Skip build notification
      if: steps.check-image.outputs.skip_build == 'true'
      run: |
        echo "Skipping build - image with hash ${{ github.sha }} already exists"
        echo "Image URI: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}" 