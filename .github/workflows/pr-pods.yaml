name: PR Pod Environment Management

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PROJECT_ID: thecowgame
  REGION: us-west1
  REGISTRY: us-west1-docker.pkg.dev

jobs:
  build-image:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    outputs:
      image-sha: ${{ steps.build.outputs.image-sha }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker ${{ env.REGISTRY }}

    - name: Build and push Docker image
      id: build
      run: |
        IMAGE_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/game-images/mmo-server:${IMAGE_SHA}"
        
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        
        echo "image-sha=${IMAGE_SHA}" >> $GITHUB_OUTPUT

  deploy-pr-pods:
    if: github.event.action != 'closed'
    needs: build-image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials the-cow-game-cluster --region=${{ env.REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./infra/pr-pods
      run: terraform init

    - name: Create or select workspace
      working-directory: ./infra/pr-pods
      run: |
        WORKSPACE_NAME="pr-${{ github.event.number }}"
        terraform workspace select $WORKSPACE_NAME || terraform workspace new $WORKSPACE_NAME

    - name: Create Terraform variables file
      working-directory: ./infra/pr-pods
      run: |
        cat > terraform.tfvars <<EOF
        project_id = "${{ env.PROJECT_ID }}"
        region = "${{ env.REGION }}"
        image_sha = "${{ needs.build-image.outputs.image-sha }}"
        environment = "pr-${{ github.event.number }}"
        pr_number = "${{ github.event.number }}"
        EOF

    - name: Terraform Plan
      working-directory: ./infra/pr-pods
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ./infra/pr-pods
      run: terraform apply tfplan

    - name: Get deployment info
      id: get-info
      run: |
        # Write outputs directly using predictable names
        echo "gameserver-pod=cow-game-pr-${{ github.event.number }}-server" >> $GITHUB_OUTPUT
        echo "redis-pod=cow-game-pr-${{ github.event.number }}-redis" >> $GITHUB_OUTPUT  
        echo "gameserver-service=cow-game-pr-${{ github.event.number }}-server" >> $GITHUB_OUTPUT
        
        # Get load balancer IP using kubectl instead of terraform output to avoid debug info
        SERVICE_NAME="cow-game-pr-${{ github.event.number }}-server"
        LB_IP=$(kubectl get service $SERVICE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
        
        # If IP is empty, set to pending
        if [ -z "$LB_IP" ] || [ "$LB_IP" = "null" ]; then
          LB_IP="pending"
        fi
        
        echo "load-balancer-ip=${LB_IP}" >> $GITHUB_OUTPUT

    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.payload.number;
          const imagesha = "${{ needs.build-image.outputs.image-sha }}";
          const gameserverPod = "${{ steps.get-info.outputs.gameserver-pod }}";
          const redisPod = "${{ steps.get-info.outputs.redis-pod }}";
          const gameserverService = "${{ steps.get-info.outputs.gameserver-service }}";
          const loadBalancerIP = "${{ steps.get-info.outputs.load-balancer-ip }}";
          
          const ipStatus = loadBalancerIP === "pending" ? 
            "🔄 LoadBalancer IP is being assigned..." : 
            `🌐 **Access URL:** http://${loadBalancerIP}`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **PR Pod Environment Deployed!**
            
            **Environment:** \`pr-${prNumber}\`
            **Image SHA:** \`${imagesha}\`
            ${ipStatus}
            
            **Resources Created:**
            - Game Server Pod: \`${gameserverPod}\`
            - Redis Pod: \`${redisPod}\`
            - Game Server Service: \`${gameserverService}\`
            
            **Commands to check status:**
            \`\`\`bash
            kubectl get pods -l pr-number=${prNumber}
            kubectl get services -l pr-number=${prNumber}
            \`\`\`
            
            **To access logs:**
            \`\`\`bash
            kubectl logs ${gameserverPod}
            kubectl logs ${redisPod}
            \`\`\`
            `
          });

  cleanup-pr-pods:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials the-cow-game-cluster --region=${{ env.REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./infra/pr-pods
      run: terraform init

    - name: Create Terraform variables file
      working-directory: ./infra/pr-pods
      run: |
        cat > terraform.tfvars <<EOF
        project_id = "${{ env.PROJECT_ID }}"
        region = "${{ env.REGION }}"
        image_sha = "cleanup"
        environment = "pr-${{ github.event.number }}"
        pr_number = "${{ github.event.number }}"
        EOF

    - name: Select workspace and destroy
      working-directory: ./infra/pr-pods
      run: |
        WORKSPACE_NAME="pr-${{ github.event.number }}"
        if terraform workspace select $WORKSPACE_NAME; then
          terraform destroy -auto-approve
          
          terraform workspace select default
          terraform workspace delete $WORKSPACE_NAME
        else
          echo "Workspace pr-${{ github.event.number }} not found, nothing to clean up"
        fi

    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          const prNumber = context.payload.number;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🧹 **PR Pod Environment Cleaned Up!**
            
            **Environment:** \`pr-${prNumber}\`
            **Status:** All pods and services destroyed
            
            The following resources have been removed:
            - Game Server Pod: \`cow-game-pr-${prNumber}-server\`
            - Redis Pod: \`cow-game-pr-${prNumber}-redis\`
            - Associated services and LoadBalancer
            `
          }); 
