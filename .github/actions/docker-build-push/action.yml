name: 'Docker Build and Push'
description: 'Builds a Docker image and pushes it to an authenticated registry. Assumes gcloud and docker are authenticated.'

inputs:
  registry:
    description: 'The full registry path (e.g., us-west1-docker.pkg.dev)'
    required: true
  project_id:
    description: 'GCP Project ID'
    required: true
  repository:
    description: 'The repository name in Artifact Registry'
    required: true
  image_name:
    description: 'The name of the Docker image'
    required: true
  image_sha:
    description: 'The full SHA to tag the image with'
    required: true
  tag_latest:
    description: 'Whether to also tag the image as latest'
    required: false
    default: 'false'

outputs:
  image_uri:
    description: "The full URI of the pushed image with SHA tag"
    value: ${{ steps.set-outputs.outputs.image_uri }}
  short_sha:
    description: "The short 7-character SHA"
    value: ${{ steps.set-outputs.outputs.short_sha }}
  full_sha:
    description: "The full SHA used for tagging"
    value: ${{ inputs.image_sha }}

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Check if image already exists
      id: check-image
      shell: bash
      run: |
        IMAGE_TAG="${{ inputs.registry }}/${{ inputs.project_id }}/${{ inputs.repository }}/${{ inputs.image_name }}:${{ inputs.image_sha }}"
        echo "Checking for image: $IMAGE_TAG"
        if docker pull $IMAGE_TAG 2>/dev/null; then
          echo "Image already exists."
          echo "skip_build=true" >> $GITHUB_OUTPUT
        else
          echo "Image does not exist. Will build."
          echo "skip_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      if: steps.check-image.outputs.skip_build != 'true'
      shell: bash
      run: |
        IMAGE_URI="${{ inputs.registry }}/${{ inputs.project_id }}/${{ inputs.repository }}/${{ inputs.image_name }}"
        IMAGE_TAG_SHA="$IMAGE_URI:${{ inputs.image_sha }}"

        docker build -t $IMAGE_TAG_SHA .
        docker push $IMAGE_TAG_SHA
        
        if [ "${{ inputs.tag_latest }}" == "true" ]; then
          echo "Tagging and pushing latest tag..."
          IMAGE_TAG_LATEST="$IMAGE_URI:latest"
          docker tag $IMAGE_TAG_SHA $IMAGE_TAG_LATEST
          docker push $IMAGE_TAG_LATEST
        fi

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        echo "image_uri=${{ inputs.registry }}/${{ inputs.project_id }}/${{ inputs.repository }}/${{ inputs.image_name }}:${{ inputs.image_sha }}" >> $GITHUB_OUTPUT
        echo "short_sha=$(echo ${{ inputs.image_sha }} | cut -c1-7)" >> $GITHUB_OUTPUT 